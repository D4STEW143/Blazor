@page "/disciplines"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    <form action="/disciplines" data-enhance data-permanent>
        <input type="search" name="nameFilter" @bind="NameFilter"/>
        <input type="submit" value="Search" />
    </form>
</div>
<div>
    <label for="disciplines-per-page">Disciplines per page</label>
    <select id="disciplines-per-page" @bind="pagination.ItemsPerPage">
        <option value="5">5</option>
        <option value="10">10</option>
    </select>
</div>

<p>
    <a href="disciplines/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Disciplines">
    <PropertyColumn Property="discipline => discipline.discipline_id" />
    <PropertyColumn Property="discipline => discipline.discipline_name" />
    <PropertyColumn Property="discipline => discipline.number_of_lessons" />

    <TemplateColumn Context="discipline">
        <a href="@($"disciplines/edit?discipline_id={discipline.discipline_id}")">Edit</a> |
        <a href="@($"disciplines/details?discipline_id={discipline.discipline_id}")">Details</a> |
        <a href="@($"disciplines/delete?discipline_id={discipline.discipline_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination"></Paginator>

@code {
    private AcademyContext context = default!;

    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    [SupplyParameterFromQuery]
    string? NameFilter { get; set; } = string.Empty;
    IQueryable<Discipline> FilteredDirections => context.Disciplines.Where(d => d.discipline_name.Contains(NameFilter ?? string.Empty));

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
